# This is a basic workflow to help you get started with Actions

name: Team1-CI

# Controls when the workflow will run
on: [push, pull_request, workflow_dispatch]


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Build
        run: |
          cd Projects/P3
          javac -cp "tests/junit-4.10.jar:src/:tests/" src/*.java tests/*.java
          
  Consume:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          cd Projects/P3
          javac -cp "tests/junit-4.10.jar:src/:tests/" src/*.java tests/TestConsume.java
          java -cp "tests/junit-4.10.jar:src/:tests/" -Djava.awt.headless=true org.junit.runner.JUnitCore tests/TestConsume


  Attack:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          cd Projects/P3
          javac -cp "tests/junit-4.10.jar:src/:tests/" src/*.java tests/TestAttack.java
          java -cp "tests/junit-4.10.jar:src/:tests/" -Djava.awt.headless=true org.junit.runner.JUnitCore tests/TestAttack
      
  MapEatCookie:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: openjdk
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          cd Projects/P3
          javac -cp "tests/junit-4.10.jar:src/:tests/" src/*.java tests/TestMapEatCookie.java
          java -cp "tests/junit-4.10.jar:src/:tests/" -Djava.awt.headless=true org.junit.runner.JUnitCore tests/TestMapEatCookie
